<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xwbing.service.domain.mapper.sys.SysRoleMapper">
    <resultMap id="BaseResultMap" type="com.xwbing.service.domain.entity.sys.SysRole">
        <id column="id" property="id"/>
        <result column="create_time" property="createTime"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <sql id="Table">
        sys_role
    </sql>

    <sql id="Base_Column_List">
        id,
        creator,
        modifier,
        create_time,
        modified_time,
        name,
        code,
        enable,
        remark
    </sql>

    <sql id="condition">
        <where>
            <if test="code!=null">
                code=#{code}
            </if>
            <if test="enable!=null">
                and enable=#{enable}
            </if>
            <if test="ids!=null">
                and id in
                <foreach collection="ids" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
            </if>
            <if test="id!=null">
                and id!=#{id}
            </if>
        </where>
    </sql>

    <insert id="insert">
        <selectKey keyProperty="id" resultType="string" order="BEFORE">
            SELECT REPLACE(UUID(), '-', '')
        </selectKey>
        INSERT INTO
        <include refid="Table"/>(
        id,
        creator,
        create_time,
        name,
        code,
        enable,
        remark
        )
        VALUES(
        #{id},
        #{creator},
        now(),
        #{name},
        #{code},
        #{enable},
        #{remark}
        )
    </insert>

    <insert id="insertBatch">
        INSERT INTO
        <include refid="Table"/>(
        id,
        creator,
        create_time,
        name,
        code,
        enable,
        remark
        )
        VALUES
        <foreach collection="list" item="obj" separator=",">(
            (SELECT REPLACE(UUID(), '-', '') AS id),
            #{obj.creator},
            now(),
            #{obj.name},
            #{obj.code},
            #{obj.enable},
            #{obj.remark}
            )
        </foreach>
    </insert>

    <delete id="deleteById">
        DELETE FROM
        <include refid="Table"/>
        WHERE id=#{id}
    </delete>

    <delete id="deleteByIds">
        DELETE FROM
        <include refid="Table"/>
        WHERE id IN
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="delete">
        DELETE FROM
        <include refid="Table"/>
        <include refid="condition"/>
    </delete>

    <update id="update">
        UPDATE
        <include refid="Table"/>
        <set>
            modified_time=now(),
            <if test="modifier!=null">modifier=#{modifier},</if>
            <if test="name!=null">name=#{name},</if>
            <if test="code!=null">code=#{code},</if>
            <if test="enable!=null">enable=#{enable},</if>
            <if test="remark!=null">remark=#{remark},</if>
        </set>
        WHERE id=#{id}
    </update>

    <update id="updateBatch">
        UPDATE
        <include refid="Table"/>
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="modified_time=case" suffix="end,">
                <foreach collection="list" item="obj">
                    when id=#{obj.id} then now()
                </foreach>
            </trim>
            <trim prefix="modifier=case" suffix="end,">
                <foreach collection="list" item="obj">
                    <if test="obj.modifier!=null">
                        when id=#{obj.id} then #{obj.modifier}
                    </if>
                </foreach>
            </trim>
            <trim prefix="name=case" suffix="end,">
                <foreach collection="list" item="obj">
                    <if test="obj.name!=null">
                        when id=#{obj.id} then #{obj.name}
                    </if>
                </foreach>
            </trim>
            <trim prefix="code=case" suffix="end,">
                <foreach collection="list" item="obj">
                    <if test="obj.code!=null">
                        when id=#{obj.id} then #{obj.code}
                    </if>
                </foreach>
            </trim>
            <trim prefix="enable=case" suffix="end,">
                <foreach collection="list" item="obj">
                    <if test="obj.enable!=null">
                        when id=#{obj.id} then #{obj.enable}
                    </if>
                </foreach>
            </trim>
            <trim prefix="remark=case" suffix="end,">
                <foreach collection="list" item="obj">
                    <if test="obj.remark!=null">
                        when id=#{obj.id} then #{obj.remark}
                    </if>
                </foreach>
            </trim>
        </trim>
        <where>
            <foreach collection="list" separator="or" item="obj">
                id=#{obj.id}
            </foreach>
        </where>
    </update>

    <select id="findById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="Table"/>
        WHERE id=#{id}
    </select>

    <select id="findByIds" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="Table"/>
        WHERE id IN
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="find" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="Table"/>
        <include refid="condition"/>
    </select>

    <select id="findAll" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="Table"/>
        ORDER BY create_time DESC
    </select>

</mapper>